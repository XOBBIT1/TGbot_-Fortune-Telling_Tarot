import random
import time

from core.services.queries import get_data_by_name
from core.core_bote.animation import bot, loading
from core.core_bote.keyboards import keyboard
from settings.bd.models import Cards
from settings.config_settings import common_phrases, emojis


def callback_fortune_buttons(call):
    try:
        global data_form_base
        if call.message:
            if call.data == "fortune" or call.data =="new_card":
                data_form_base = get_data_by_name(Cards)
                for card_data in data_form_base:
                    loading(call.message, '–¢–∞—Å—É–µ–º –∫–∞—Ä—Ç—ã {}', "üÄß")
                    bot.send_message(call.message.chat.id, f"–í–∞—à <b>–ê–†–ö–ê–ù</b>: {card_data.harness}")
                    time.sleep(2)
                    bot.send_message(call.message.chat.id, f"–í–∞—à–∞ <b>–ö–ê–†–¢–ê</b> —ç—Ç–æ - <b>{card_data.card_name}</b>")
                    time.sleep(2)
                    bot.send_photo(call.message.chat.id, f"{card_data.images.img_url}")
                    loading(call.message, random.choice(common_phrases), random.choice(emojis))
                    bot.send_message(call.message.chat.id, f"–ó–Ω–∞—á–µ–Ω–∏–µ <b>–ö–∞—Ä—Ç—ã {card_data.card_name}</b>: \n"
                                                           f"<i> {card_data.card_description}</i>")
                    time.sleep(1)
                    callback_topics(call)
                    time.sleep(3)
            elif call.data == "layout":
                bot.send_message(call.message.chat.id, f"–†–∞—Å–∫–ª–∞–¥—ã –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µüò¢")
    except Exception as e:
        print("dwdawdwaadwadwada")
        bot.send_message(call.message.chat.id, f"–ë–æ—Ç –Ω–µ–¥–∞–≤–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–ª—Å—è, "
                                               f"–ø–æ—ç—Ç–æ–º—É —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç—ã.üò¢\n"
                                               f"<b>–ù–∞–ø–∏—à–∏ –º–Ω–µ –∏ –≤—ã–±–∏—Ä–∞–π –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É !</b>\n"
                                               f"–ò–ª–∏ –∫–ª–∏–∫–∞–π –Ω–∞ üëâ /start ")


def callback_topics(call):
    try:
        if call.message:
            for card_data in data_form_base:
                if call.data == "love":
                    loading(call.message, random.choice(common_phrases), random.choice(emojis))
                    bot.send_sticker(call.message.chat.id, open("static/AnimatedStickerLove.tgs", "rb"))
                    bot.send_message(call.message.chat.id, f"–ó–Ω–∞—á–µ–Ω–∏–µ <b>–ö–∞—Ä—Ç—ã {card_data.card_name}</b>"
                                                           f" –≤ <b>–õ—é–±–≤–∏</b> ‚ù§Ô∏è: \n "
                                                           f"<i>{card_data.descriptions.love_description}</i>")
                elif call.data == "work":
                    loading(call.message, random.choice(common_phrases), random.choice(emojis))
                    bot.send_sticker(call.message.chat.id, open("static/AnimatedStickerWork.tgs", "rb"))
                    bot.send_message(call.message.chat.id, f"–ó–Ω–∞—á–µ–Ω–∏–µ <b>–ö–∞—Ä—Ç—ã {card_data.card_name}</b>"
                                                           f" –≤ <b>–†–∞–±–æ—Ç–µ</b> üíº: \n"
                                                           f"<i>{card_data.descriptions.work_description}</i>")
                elif call.data == "issue":
                    loading(call.message, random.choice(common_phrases), random.choice(emojis))
                    bot.send_sticker(call.message.chat.id, open("static/AnimatedStickerIssue.tgs", "rb"))
                    bot.send_message(call.message.chat.id, f"–ó–Ω–∞—á–µ–Ω–∏–µ <b>–ö–∞—Ä—Ç—ã {card_data.card_name}</b>"
                                                           f"–Ω–∞ <b>–°–∏—Ç—É–∞—Ü–∏—é</b> üÜò: \n"
                                                           f"<i>{card_data.descriptions.issue_description}</i>")
                elif call.data == "money":
                    loading(call.message, random.choice(common_phrases), random.choice(emojis))
                    bot.send_sticker(call.message.chat.id, open("static/AnimatedStickerMoney.tgs", "rb"))
                    bot.send_message(call.message.chat.id, f"–ó–Ω–∞—á–µ–Ω–∏–µ <b>–ö–∞—Ä—Ç—ã {card_data.card_name}</b>"
                                                           f" –≤ <b>–§–∏–Ω–∞–Ω—Å–∞—Ö</b> üí¥: \n"
                                                           f"<i>{card_data.descriptions.money_description}</i>")
                elif call.data == "health":
                    loading(call.message, random.choice(common_phrases), random.choice(emojis))
                    bot.send_sticker(call.message.chat.id, open("static/AnimatedStickerHealth.tgs", "rb"))
                    bot.send_message(call.message.chat.id, f"–ó–Ω–∞—á–µ–Ω–∏–µ <b>–ö–∞—Ä—Ç—ã {card_data.card_name}</b>"
                                                           f" –≤ <b>–ó–¥–æ—Ä–æ–≤—å–µ</b> üí™: \n"
                                                           f"<i>{card_data.descriptions.health_description}</i>")
                elif call.data == "spirit":
                    loading(call.message, random.choice(common_phrases), random.choice(emojis))
                    bot.send_sticker(call.message.chat.id, open("static/AnimatedStickerSpirit.tgs", "rb"))
                    bot.send_message(call.message.chat.id, f"–î—É—Ö–æ–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ <b>–ö–∞—Ä—Ç—ã</b> üßò: \n"
                                                           f"<i>{card_data.descriptions.spirit_description}</i>")
                keyboard(call.message)
    except Exception as e:
        print(repr(e))
        bot.send_message(call.message.chat.id, f"–ë–æ—Ç –Ω–µ–¥–∞–≤–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–ª—Å—è, "
                                               f"–ø–æ—ç—Ç–æ–º—É —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç—ã.üò¢\n"
                                               f"<b>–ù–∞–ø–∏—à–∏ –º–Ω–µ –∏ –≤—ã–±–∏—Ä–∞–π –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É !</b>\n"
                                               f"–ò–ª–∏ –∫–ª–∏–∫–∞–π –Ω–∞ üëâ /start ")


# def callback_layout(call):
#     if call.message:
#         if call.data == "layout":
#             bot.send_message(call.message.chat.id, f"–†–∞—Å–∫–ª–∞–¥—ã –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µüò¢")
